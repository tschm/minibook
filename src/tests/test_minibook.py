"""
Tests for the MiniBook package.
"""

import os
import shutil
import tempfile
from pathlib import Path

import pytest
from minibook.main import generate_html, generate_mkdocs_project


def test_generate_html(resource_dir):
    """Test generating HTML with Jinja2."""
    # Define test data
    title = "Test Links"
    description = "This is a test page created by MiniBook"
    links = [
        ("Python", "https://www.python.org"),
        ("GitHub", "https://www.github.com"),
        ("Wikipedia", "https://www.wikipedia.org")
    ]
    timestamp = "2023-06-18 12:00:00"
    output_file = resource_dir / "test_output.html"

    # Generate the HTML
    result = generate_html(
        title=title,
        links=links,
        description=description,
        timestamp=timestamp,
        output_file=str(output_file)
    )

    # Check that the file was created
    assert os.path.exists(result)
    
    # Read the file and check its contents
    with open(result, 'r') as f:
        content = f.read()
    
    # Check that the title, description, and links are in the content
    assert title in content
    assert description in content
    assert "https://www.python.org" in content
    assert "https://www.github.com" in content
    assert "https://www.wikipedia.org" in content
    assert timestamp in content


def test_generate_mkdocs_project(resource_dir):
    """Test generating a MkDocs project."""
    # Define test data
    title = "Test Links"
    description = "This is a test page created by MiniBook"
    links = [
        ("Python", "https://www.python.org"),
        ("GitHub", "https://www.github.com"),
        ("Wikipedia", "https://www.wikipedia.org")
    ]
    timestamp = "2023-06-18 12:00:00"
    output_dir = resource_dir / "test_mkdocs_site"

    # Generate the MkDocs project
    result = generate_mkdocs_project(
        title=title,
        links=links,
        description=description,
        timestamp=timestamp,
        output_dir=str(output_dir)
    )

    # Check that the directory was created
    assert os.path.exists(result)
    
    # Check that the docs directory was created
    docs_dir = os.path.join(result, "docs")
    assert os.path.exists(docs_dir)
    
    # Check that the index.md file was created
    index_file = os.path.join(docs_dir, "index.md")
    assert os.path.exists(index_file)
    
    # Check that the mkdocs.yml file was created
    mkdocs_file = os.path.join(result, "mkdocs.yml")
    assert os.path.exists(mkdocs_file)
    
    # Read the index.md file and check its contents
    with open(index_file, 'r') as f:
        content = f.read()
    
    # Check that the title, description, and links are in the content
    assert f"# {title}" in content
    assert f"*{description}*" in content
    assert "* [Python](https://www.python.org)" in content
    assert "* [GitHub](https://www.github.com)" in content
    assert "* [Wikipedia](https://www.wikipedia.org)" in content
    assert f"*Generated by MiniBook on {timestamp}*" in content


def test_command_line_execution(tmp_path):
    """Test command-line execution of MiniBook."""
    import subprocess
    
    # Create a run_minibook.py script in the root directory if it doesn't exist
    root_dir = Path(__file__).parent.parent.parent
    run_script = root_dir / "run_minibook.py"
    
    if not run_script.exists():
        with open(run_script, 'w') as f:
            f.write("""#!/usr/bin/env python3
import sys
from minibook.main import main

if __name__ == "__main__":
    sys.exit(main())
""")
        os.chmod(run_script, 0o755)  # Make the script executable
    
    # Test HTML generation
    html_output = tmp_path / "test_output.html"
    html_cmd = [
        str(run_script),
        "--title", "Test Links",
        "--description", "This is a test page created by MiniBook",
        "--output", str(html_output),
        "--format", "html",
        "--links",
        "https://www.python.org",
        "https://www.github.com",
        "https://www.wikipedia.org"
    ]
    
    html_result = subprocess.run(html_cmd, capture_output=True, text=True)
    
    # Check that the command executed successfully
    assert html_result.returncode == 0, f"HTML command failed with error: {html_result.stderr}"
    
    # Check that the HTML file was created
    assert os.path.exists(html_output)
    
    # Test MkDocs generation
    mkdocs_output = tmp_path / "test_mkdocs_site"
    mkdocs_cmd = [
        str(run_script),
        "--title", "Test Links",
        "--description", "This is a test page created by MiniBook",
        "--output", str(mkdocs_output),
        "--format", "mkdocs",
        "--links",
        "https://www.python.org",
        "https://www.github.com",
        "https://www.wikipedia.org"
    ]
    
    mkdocs_result = subprocess.run(mkdocs_cmd, capture_output=True, text=True)
    
    # Check that the command executed successfully
    assert mkdocs_result.returncode == 0, f"MkDocs command failed with error: {mkdocs_result.stderr}"
    
    # Check that the MkDocs directory was created
    assert os.path.exists(mkdocs_output)
    
    # Check that the docs directory was created
    docs_dir = mkdocs_output / "docs"
    assert os.path.exists(docs_dir)
    
    # Check that the index.md file was created
    index_file = docs_dir / "index.md"
    assert os.path.exists(index_file)
    
    # Check that the mkdocs.yml file was created
    mkdocs_file = mkdocs_output / "mkdocs.yml"
    assert os.path.exists(mkdocs_file)