# GitHub Action to generate a minibook from a list of links and deploy it to GitHub Pages
# This action creates an HTML page with links, downloads any artifacts from previous jobs,
# and deploys everything to GitHub Pages in a single step.
name: 'Book Action'
description: 'Create a Book from a list of links and deploy it to GitHub Pages'

# Input parameters that can be provided when using this action
inputs:
  # The title will be displayed at the top of the generated HTML page
  title:
    description: 'Title of the minibook that appears at the top of the page'
    required: false
    default: 'My Links'

  # The subtitle/description appears below the title in the generated HTML page
  subtitle:
    description: 'Description text that appears below the title'
    required: false
    default: ''

  # Links parameter is the core content of the minibook
  # It defines what links will be displayed on the page
  links:
    description: 'JSON formatted links that will be displayed on the page. Can be formatted as:
      - A dictionary: {"name1": "url1", "name2": "url2"}
      - A list of objects: [{"name": "name1", "url": "url1"}, {"name": "name2", "url": "url2"}]
      - A list of arrays: [["name1", "url1"], ["name2", "url2"]]'
    required: true

  # Optional custom template for advanced customization of the HTML output
  template:
    description: 'Path to a custom Jinja2 template file for HTML output. Use this to customize the appearance of the generated page.'
    required: false
    default: ''

# Define how the action will run
runs:
  using: 'composite'  # Composite actions combine multiple steps
  steps:
    # Step 1: Checkout the repository code
    # This is needed to access the package code for installation
    - name: Checkout repository
      uses: actions/checkout@v4  # Official GitHub checkout action

    # Step 2: Set up Python environment with uv (faster alternative to pip)
    # This step installs Python 3.12 and the uv package manager
    - name: Set up Python 3.12
      uses: astral-sh/setup-uv@v6  # Official action for setting up uv
      with:
        python-version: 3.12  # Specify Python version to use

    # Step 2: Download all artifacts from previous jobs
    # This automatically retrieves artifacts uploaded by jobs specified in the 'needs' field
    - name: Download all artifacts
      uses: actions/download-artifact@v4  # Official GitHub artifact download action
      with:
        path: artifacts  # Directory where artifacts will be downloaded

    # Step 3: Install and run the minibook CLI tool
    # This step installs the minibook package and runs it with the input parameters
    - name: Create minibook
      shell: bash  # Use bash shell to run the command
      run: |
        # Install the minibook package
        # uv pip install -e .

        # Run minibook CLI tool
        uvx minibook \
          --title "${{ inputs.title }}"  # Pass the title input parameter
          --description "${{ inputs.subtitle }}"  # Pass the subtitle input parameter
          --output 'artifacts'  # Output to the artifacts directory
          --links '${{ inputs.links }}'  # Pass the links input parameter
          --template '${{ inputs.template }}'  # Pass the template input parameter (if provided)

    # Step 4: Display the structure of the artifacts directory
    # This helps with debugging by showing what files were generated
    - name: Inspect artifacts
      shell: bash
      run: |
        tree artifacts  # Show directory structure in tree format

    # Step 5: Package all artifacts for GitHub Pages deployment
    # This prepares the combined outputs for deployment by creating a single artifact
    - name: Upload static files as artifact
      id: upload  # ID to reference this step later if needed
      uses: actions/upload-pages-artifact@v3  # Official GitHub Pages artifact upload action
      with:
        path: artifacts/  # Path to the directory containing all artifacts to deploy

    # Step 6: Deploy the packaged artifacts to GitHub Pages
    # This step publishes the content to GitHub Pages
    - name: Deploy to GitHub Pages
      id: deployment  # ID to reference this step later if needed
      uses: actions/deploy-pages@v4  # Official GitHub Pages deployment action
